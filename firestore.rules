rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is a member of a household
    function isHouseholdMember(householdId) {
      return request.auth.uid in get(/databases/$(database)/documents/households/$(householdId)).data.members;
    }
    
    // Helper function to get the user's household ID from their profile
    function getUserHouseholdId() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.householdId;
    }

    // Users can only read and write their own profile
    match /users/{userId} {
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for households
    match /households/{householdId} {
      // Allow read if user is a member of the household
      allow read: if request.auth != null && isHouseholdMember(householdId);
      
      // Allow authenticated users to create a new household.
      // The new household must include the creator in its members list.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;
      
      // Allow a user to join a household (update the members list)
      allow update: if request.auth != null && request.auth.uid in request.resource.data.members;
    }

    // Rules for subcollections within a household
    match /households/{householdId}/{collection}/{docId} {
        // Allow full access (read, write, delete) only if the user is a member of the household.
        allow read, write, delete: if request.auth != null && getUserHouseholdId() == householdId && isHouseholdMember(householdId);
    }
  }
}
